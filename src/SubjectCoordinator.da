common = import_da('common')
dbEmulator = import_da('DbEmulator')
import time

requests = {}
tentative = {}
tentStatus = {}
updates = {}
waiting = {}

ongoing = 1
success = 2
failure = 3

class SubjectCoordinator(process):
	def setup(dbId:dbEmulator.DbEmulator):pass

	def run():
		output("hello SubCo!")
		await(False)

	def receive(msg=('POLICY_EVAL_REQUEST',reqObject),from_=recvProcId):
		requests[reqObject.uniqueId] = reqObject
		
		for key in tentative:
			temp = tentative[key]
			if temp['id'] == reqObject.subId or temp['id'] == reqObject.resId:
				temp['used'] = False
				reqObject.tentativeUpdate[key] = temp
				reqObject.isTentative = True

		print("Send to resco:",reqObject.resCoId)
		send(('POLICY_EVAL_REQUEST',reqObject,), to=reqObject.resCoId)


	def receive(msg=('POLICY_EVAL_RESULT',reqObject,), from_=recvProcId):
		print("res is:",reqObject.result['value'])
		if(reqObject.result['value']):
			if checkForConflict(reqObject) == True:
				if reqObject.isTentative == False:
					updateTentativeAttr(reqObject, reqObject.result)
				else:
					for key in reqObject.tentativeUpdate:
						tent = reqObject.tentativeUpdate[key]
						if tent['used'] == True:
							if tentStatus[key] == ongoing:
								if tent['parent'] in waiting:
									waiting[tent['parent']].append(reqObject)
								else:
									waiting[tent['parent']] = [reqObject]
								return
							elif tentStatus[key] == success:
								continue
							else:
								restartRequest(reqObject)
								return
					updateTentativeAttr(reqObject, reqObject.result)

				#send Resource conflict check msg to resource coordinator	
				send(('POLICY_CONFLICT_CHECK',reqObject,),to=reqObject.resCoId)
			else:
				restartRequest(reqObject)
		else:		
			send((reqObject.result,),to=reqObject.clientId)		

	def receive(msg=('POLICY_CONFLICT_CHECK',reqObject,), from_=recvProcId):
		if(reqObject.result['value']):
			commitTentativeAttr(reqObject)	
		else:
			removeTentativeEntry(reqObject)
			restartRequest(reqObject)

		#sending evaluation status to client
		send((reqObject.result,),to=reqObject.clientId)

	def checkWaiting(uid):
		for obj in waiting[uid]:
			for key in obj.tentativeUpdate:
				tent = obj.tentativeUpdate[key]
				if tent['used'] == True:
					if tentStatus[key] == ongoing:
						if tent['parent'] in waiting:
							waiting[tent['parent']].append(obj)
						else:
							waiting[tent['parent']] = [obj]
						return
					elif tentStatus[key] == success:
						continue
					else:
						restartRequest(obj)
						return
		updateTentativeAttr(obj, obj.result)
		send(('POLICY_CONFLICT_CHECK',obj,),to=obj.resCoId)
	

	def checkForConflict(reqObject):
		for attr in reqObject.subRules:
			print(attr)
			if (reqObject.subId, attr) in updates:
				updateTime = updates[(reqObject.subId, attr)]
				if updateTime >= reqObject.timestamp:
					output('Conflict in SubjectCoordinator')
					return False
				else:
					updates[(reqObject.subId, attr)] = reqObject.timestamp
			else:
				updates[(reqObject.subId, attr)] = reqObject.timestamp

		print('Subject Updates',updates)
		return True

	def updateTentativeAttr(reqObject, result):
		if result['update'] == False:
			return
		temp = {}
		if result['type'] == 'subject':
			temp['id'] = reqObject.subId
		else:
			temp['id'] = reqObject.resId
		temp['parent'] = reqObject.uniqueId
		temp['attrName'] = result['attrName']
		temp['attrValue'] = result['attrValue']
		tentative[reqObject.uniqueId] = temp
		tentStatus[reqObject.uniqueId] = ongoing

	def commitTentativeAttr(reqObject):
		if reqObject.uniqueId not in tentative:
			return
		commitObj = tentative[reqObject.uniqueId]
		dbObj = common.DbObject()
		dbObj.database = commitObj
		send(('DB_WRITE',dbObj,),to=dbId)
		tentStatus[reqObject.uniqueId] = success
		if reqObject.uniqueId in tentative:
			del tentative[reqObject.uniqueId]
		if reqObject.uniqueId in waiting:
			checkWaiting(reqObject.uniqueId)
			del waiting[reqObject.uniqueId]

	def	removeTentativeEntry(reqObject):
		if reqObject.uniqueId in tentative:
			del tentative[reqObject.uniqueId]
			tentStatus[reqObject.uniqueId] = failure
		if reqObject.uniqueId in tentative:
			del tentative[reqObject.uniqueId]
		if reqObject.uniqueId in waiting:
			checkWaiting(reqObject.uniqueId)
			del waiting[reqObject.uniqueId]

	def restartRequest(reqObject):
		output("Restarting request")
		reqObject = requests[reqObject.uniqueId]
		reqObject.timestamp=time.time()
		send(('POLICY_EVAL_REQUEST',reqObject,),to=self.id)