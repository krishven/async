common = import_da('common')

import random
import time
import pprint
import xml.etree.ElementTree as ET
import logging

database={}

class DbEmulator(process):
	def setup(configFile:str):
		self.dbObj = common.DbObject()
		self.configHashMap={}

	def run():	
		self.configHashMap = common.readConfigFile(configFile)
		database = initDB(configHashMap['dbFile'])
		self.dbObj.database = database
		if('randomSeed' not in configHashMap):
			self.configHashMap['randomSeed']=1
		random.seed(self.configHashMap['randomSeed'])
		await(False)

	def receive(msg=('DB_READ',reqObject,), from_=srcId):
		#DB Read request
		output("Received content in DB (DB READ) from Worker {0}:".format(srcId),reqObject,level=logging.DEBUG)
		self.dbObj.reqObject = reqObject
		output('Read from database')
		send(('DB_READ',self.dbObj,),to=srcId)
		output("Sent content from DB (DB READ) to Worker {0}:".format(srcId),reqObject,level=logging.DEBUG)

	def receive(msg=('DB_WRITE',reqObject,), from_=srcId):
		#DB Write request
		output("Received content in DB (COMMIT) from SC {0}:".format(srcId),reqObject,level=logging.DEBUG)
		#delay if latency specified
		if('minDbLatency' in self.configHashMap and 'maxDbLatency' in self.configHashMap):
			delay = random.randint(int(configHashMap['minDbLatency']),int(configHashMap['maxDbLatency']))
			output("Latency:",delay)
			time.sleep(delay)
		temp = self.dbObj.database[reqObject.database['id']]
		temp[reqObject.database['attrName']] = reqObject.database['attrValue']
		self.dbObj.database[reqObject.database['id']] = temp
		output('Written to database')
		pp = pprint.PrettyPrinter(indent=4)
		pp.pprint(self.dbObj.database)
		output("Database:",self.dbObj.database,level=logging.DEBUG)

	def initDB(dbFile):
		#read from database.xml and store in memory cache
		tree = ET.parse(dbFile)
		root = tree.getroot()
		for subj in root.iter('subject'):
			temp = {}
			for attrName, attrValue in subj.items():
				if attrName != 'id':
					temp[attrName] = attrValue
			database[subj.attrib['id']] = temp

		for res in root.iter('resource'):
			temp = {}
			for attrName, attrValue in res.items():
				if attrName != 'id':
					temp[attrName] = attrValue
			database[res.attrib['id']] = temp
		return database