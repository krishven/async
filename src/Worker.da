SubjectCoordinator = import_da('SubjectCoordinator')
common = import_da('common')
dbEmulator = import_da('DbEmulator')

import xml.etree.ElementTree as ET
import time
result = {}

class Worker(process):
	def setup(dbId: dbEmulator.DbEmulator, configHasHMap:dict):pass

	def run():
		output("hello Worker!")
		await(False)

	def receive(msg=('POLICY_EVAL_REQUEST',reqObject,), from_=subCoId):	
		output("Received from ResCo")
		send(('DB_READ',reqObject,),to=dbId)

	def receive(msg=('DB_READ',reqObject,), from_=subCoId):	
		output("Read from Db emulator" , reqObject.reqObject)
		database = reqObject.database
		reqObject = reqObject.reqObject
		reqObject.result = evaluatePolicyRequest(database,reqObject)
		reqObject.timestamp = time.time()
		#time.sleep(int(reqObject.waitTime))
		send(('POLICY_EVAL_RESULT',reqObject,),to=reqObject.subCoId)

	def checkUpdate(data, attrName, attrValue):
		if(attrValue == '++'):
			count = int(data[attrName])
			count += 1
			return str(count)

		elif(attrValue == '--'):
			count = int(data[attrName])
			count -= 1
			return str(count)

		else:   
			return attrValue

	def checkCondition(attrName, attrValue, temp, cond, isTentative):
		if isTentative:
			attrName = 'attrValue'

		if "<" not in attrValue and ">" not in attrValue:
			cond = cond and temp[attrName] == attrValue
		elif "<" in attrValue:
			cond = cond and int(temp[attrName]) < int(attrValue[1:])
		elif ">" in attrValue:
			cond = cond and int(temp[attrName]) > int(attrValue[1:])

		return cond
			
	def evaluatePolicyRequest(database,reqObject):

		tree = ET.parse('../config/policy-example.xml')
		root = tree.getroot()
		result = {}
		result['value'] = False
		result['update'] = False

		for rule in root.iter('rule'):
			#print('rule', rule.attrib['name'])
			subData = database[reqObject.subId]
			subCond = True
			tentUsed = False
			subRule = []
			sc = rule.find('subjectCondition')

			for attrName, attrValue in sc.items():
				#print "%s = %s" % (attrName, attrValue)
				subRule.append(attrName)

				if reqObject.isTentative == True:
					for key in reqObject.tentativeUpdate:
						tent = reqObject.tentativeUpdate[key]
						if attrName == tent['attrName'] and tent['id'] == reqObject.subId:
							subCond = checkCondition(attrName, attrValue, tent, subCond, True)
							tent['used'] = True
							tentUsed = True
							reqObject.tentativeUpdate[key] = tent
							break

				if tentUsed == True and subCond == True:
					tentUsed = False
					continue
				elif tentUsed == True and subCond == False:
					break

				if attrName not in subData:
					return result

				subCond = checkCondition(attrName, attrValue, subData, subCond, False)

				if subCond == False:
					break

			if subCond == False:
				#print(result['value'])
				continue

			resData = database[reqObject.resId]
			resCond = True
			tentUsed = False
			resRule = []
			rc = rule.find('resourceCondition')

			for attrName, attrValue in rc.items():
				#print "%s = %s" % (attrName, attrValue)
				resRule.append(attrName)

				if reqObject.isTentative == True:
					for key in reqObject.tentativeUpdate:
						tent = reqObject.tentativeUpdate[key]
						if attrName == tent['attrName'] and tent['id'] == reqObject.resId:
							resCond = checkCondition(attrName, attrValue, tent, resCond, True)
							tent['used'] = True
							tentUsed = True
							reqObject.tentativeUpdate[key] = tent
							break

				if tentUsed == True and resCond == True:
					tentUsed = False
					continue
				elif tentUsed == True and resCond == False:
					break

				if attrName not in resData:
					return result

				resCond = checkCondition(attrName, attrValue, resData, resCond, False)

				if resCond == False:
					break

			if resCond == False:
				#print(result['value'])
				continue

			result['value'] = result['value'] or (subCond and resCond)
			#print(result['value'])

			if result['value'] == True:
				reqObject.subRules = subRule
				reqObject.resRules = resRule

				su = rule.find('subjectUpdate')
				if su != None:
					result['update'] = True
					for attrName, attrValue in su.items():
						result['type'] = 'subject'
						result['attrName'] = attrName
						result['attrValue'] = checkUpdate(subData, attrName, attrValue)
						break

				ru = rule.find('resourceUpdate')
				if ru != None:
					result['update'] = True
					for attrName, attrValue in ru.items():
						result['type'] = 'resource'
						result['attrName'] = attrName
						result['attrValue'] = checkUpdate(resData, attrName, attrValue)
						break
				break

			#print('resource condition', rc.attrib)
			#act=rule.find('action')
			#print('action', act.attrib)
			#su=rule.find('subjectUpdate')
			#if su != None:
				#print('subject update', su.attrib)
			#ru=rule.find('resourceUpdate')
			#if ru != None:
				#print('resource update', ru.attrib)
			#print()
		return result