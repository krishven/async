SubjectCoordinator = import_da('SubjectCoordinator')
common = import_da('common')

import xml.etree.ElementTree as ET
database = {}
result = {}

class Worker(process):
	def setup(configHasHMap:dict): pass

	def initDB():
		tree = ET.parse('database.xml')
		root = tree.getroot()
		for subj in root.iter('subject'):
			temp = {}
			for attrName, attrValue in subj.items():
				temp[attrName] = attrValue
			database[subj.attrib['id']] = temp

		for res in root.iter('resource'):
			temp = {}
			for attrName, attrValue in res.items():
				temp[attrName] = attrValue
			database[res.attrib['id']] = temp

	def run():
		output("hello Worker!")
		initDB()
		await(False)

	def receive(msg=(reqObject,), from_=subCoId):
		output("Received from ResCo")
		reqObject.result = evaluatePolicyRequest(reqObject)
		reqObject.msgType = common.MsgType.POLICY_EVAL_RESULT
		send((reqObject,),to=reqObject.subCoId)

	def evaluatePolicyRequest(reqObject):
		tree = ET.parse('../config/policy-example.xml')
		root = tree.getroot()
		result = {}
		result['value'] = False

		for rule in root.iter('rule'):
			#print('rule', rule.attrib['name'])
			temp = database[reqObject.subId]
			subcond = True
			sc = rule.find('subjectCondition')
			tentUsed = False

			for attrName, attrValue in sc.items():
				#print "%s = %s" % (attrName, attrValue)

				if reqObject.isTentative == True:
					for key in reqObject.tentativeUpdate:
						tent = reqObject.tentativeUpdate[key]
						if attrName == tent['attrName']:
							subcond = subcond and tent['attrValue'] == attrValue
							tent['used'] = True
							tentUsed = True
							reqObject.tentativeUpdate[key] = tent
							break

				if tentUsed == True:
					break

				if attrName not in temp:
					return False

				subcond = subcond and temp[attrName] == attrValue

			temp = database[reqObject.resId]
			rescond = True
			rc = rule.find('resourceCondition')
			for attrName, attrValue in rc.items():
				#print "%s = %s" % (attrName, attrValue)
				if attrName not in temp:
					return False
				if "<" not in attrValue and ">" not in attrValue:
					rescond = rescond and temp[attrName] == attrValue
				elif "<" in attrValue:
					rescond = rescond and int(temp[attrName]) < int(attrValue[1:])
				elif ">" in attrValue:
					rescond = rescond and int(temp[attrName][1:]) > int(attrValue[1:])

			result['value'] = result['value'] or (subcond and rescond)

			if result['value'] == True:
				su = rule.find('subjectUpdate')
				if su != None:
					for attrName, attrValue in su.items():
						result['type'] = 'subject'
						result['attrName'] = attrName
						result['attrValue'] = attrValue
						break

				ru = rule.find('resourceUpdate')
				if ru != None:
					for attrName, attrValue in ru.items():
						result['type'] = 'resource'
						result['attrName'] = attrName
						result['attrValue'] = attrValue
						break
				break

			#print('resource condition', rc.attrib)
			#act=rule.find('action')
			#print('action', act.attrib)
			#su=rule.find('subjectUpdate')
			#if su != None:
				#print('subject update', su.attrib)
			#ru=rule.find('resourceUpdate')
			#if ru != None:
				#print('resource update', ru.attrib)
			#print()
		return result