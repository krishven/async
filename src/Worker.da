SubjectCoordinator = import_da('SubjectCoordinator')
common = import_da('common')
dbEmulator = import_da('DbEmulator')

import xml.etree.ElementTree as ET
result = {}

class Worker(process):
	def setup(dbId: dbEmulator.DbEmulator, configHasHMap:dict):pass

	def run():
		output("hello Worker!")
		await(False)

	def receive(msg=(reqObject,), from_=subCoId):

		if(reqObject.msgType == common.MsgType.POLICY_EVAL_REQUEST):
			output("Received from ResCo")
			reqObject.msgType = common.MsgType.ATTR_DB_READ
			send((reqObject,),to=dbId)

		elif(reqObject.msgType == common.MsgType.ATTR_DB_READ):
			output("Read from Db emulator" , reqObject.reqObject)
			database = reqObject.database
			reqObject = reqObject.reqObject
			reqObject.result = evaluatePolicyRequest(database,reqObject)
			reqObject.msgType = common.MsgType.POLICY_EVAL_RESULT
			send((reqObject,),to=reqObject.subCoId)

	def checkResourceCondition(attrName, attrValue, temp, rescond, isTentative):
		if isTentative:
			attrName = 'attrValue'
		if "<" not in attrValue and ">" not in attrValue:
			rescond = rescond and temp[attrName] == attrValue
		elif "<" in attrValue:
			rescond = rescond and int(temp[attrName]) < int(attrValue[1:])
		elif ">" in attrValue:
			rescond = rescond and int(temp[attrName]) > int(attrValue[1:])

		return rescond
			
	def evaluatePolicyRequest(database,reqObject):

		tree = ET.parse('../config/policy-example.xml')
		root = tree.getroot()
		result = {}
		result['value'] = False

		for rule in root.iter('rule'):
			#print('rule', rule.attrib['name'])
			temp = database[reqObject.subId]
			subcond = True
			sc = rule.find('subjectCondition')
			tentUsed = False

			for attrName, attrValue in sc.items():
				#print "%s = %s" % (attrName, attrValue)

				if reqObject.isTentative == True:
					for key in reqObject.tentativeUpdate:
						tent = reqObject.tentativeUpdate[key]
						if attrName == tent['attrName'] and tent['id'] == reqObject.subId:
							subcond = subcond and tent['attrValue'] == attrValue
							tent['used'] = True
							tentUsed = True
							reqObject.tentativeUpdate[key] = tent
							break

				if tentUsed == True:
					break

				if attrName not in temp:
					return result

				subcond = subcond and temp[attrName] == attrValue

			temp = database[reqObject.resId]
			rescond = True
			rc = rule.find('resourceCondition')

			for attrName, attrValue in rc.items():
				#print "%s = %s" % (attrName, attrValue)

				if reqObject.isTentative == True:
					for key in reqObject.tentativeUpdate:
						tent = reqObject.tentativeUpdate[key]
						if attrName == tent['attrName'] and tent['id'] == reqObject.resId:
							rescond = checkResourceCondition(attrName, attrValue, tent, rescond, True)
							tent['used'] = True
							tentUsed = True
							reqObject.tentativeUpdate[key] = tent
							break

				if tentUsed == True:
					break

				if attrName not in temp:
					return result

				rescond = checkResourceCondition(attrName, attrValue, temp, rescond, False)

			result['value'] = result['value'] or (subcond and rescond)
			print(result['value'])

			if result['value'] == True:
				su = rule.find('subjectUpdate')
				if su != None:
					for attrName, attrValue in su.items():
						result['type'] = 'subject'
						result['attrName'] = attrName
						result['attrValue'] = attrValue
						break

				ru = rule.find('resourceUpdate')
				if ru != None:
					for attrName, attrValue in ru.items():
						result['type'] = 'resource'
						result['attrName'] = attrName

						if(attrValue == '++'):
							count = int(temp[attrName])
							count += 1
							result['attrValue'] = str(count)

						elif(attrValue == '--'):
							count = int(temp[attrName])
							count -= 1
							result['attrValue'] = str(count)

						else:   
							result['attrValue'] = attrValue

						break
				break

			#print('resource condition', rc.attrib)
			#act=rule.find('action')
			#print('action', act.attrib)
			#su=rule.find('subjectUpdate')
			#if su != None:
				#print('subject update', su.attrib)
			#ru=rule.find('resourceUpdate')
			#if ru != None:
				#print('resource update', ru.attrib)
			#print()
		return result